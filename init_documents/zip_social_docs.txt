# Zip Social - Technical Documentation

## Project Overview
A hyper-local social media app where users share and discover content specific to their zip code. The app filters out global noise and focuses on what's happening in your immediate community.

## Core Concept
Users post content tagged as News, Fun Facts, Events, or Random, visible only to people searching that specific zip code. Think "neighborhood bulletin board" meets "local Twitter."

---

## Technology Stack

### Frontend
- **Framework**: Flutter (supports iOS & Android simultaneously)
- **State Management**: Provider or Riverpod
- **Local Storage**: SharedPreferences (for user preferences like zip code and tag filters)

### Backend
- **Authentication**: Supabase Auth (phone number & Google OAuth)
- **Database**: Supabase PostgreSQL
- **Server Functions**: Supabase Edge Functions
- **Real-time**: Supabase Realtime subscriptions (optional for live feed updates)

---

## Database Schema

### Table 1: `users`
```
- id (UUID, primary key, auto-generated by Supabase Auth)
- custom_user_id (TEXT, unique, 6 characters, user can change)
- phone_number (TEXT, nullable)
- google_email (TEXT, nullable)
- created_at (TIMESTAMP)
- default_zipcode (TEXT, nullable, for convenience)
```

### Table 2: `posts`
```
- id (UUID, primary key, auto-generated)
- user_id (UUID, foreign key to users.id)
- username (TEXT, the custom_user_id for display)
- zipcode (TEXT, indexed for fast searching)
- content (TEXT, the actual post content)
- tag (TEXT, one of: 'news', 'fun_facts', 'events', 'random')
- event_details (JSONB, nullable, stores: when, cost, parking, link, contact)
- created_at (TIMESTAMP, indexed for sorting)
- report_count (INTEGER, default 0)
- is_active (BOOLEAN, default true, set false when report threshold hit)
```

**Indexes:**
- `zipcode` + `created_at` (for feed queries)
- `zipcode` + `tag` + `created_at` (for filtered feed queries)
- `user_id` + `created_at` (for "My Posts")

### Table 3: `post_interactions`
```
- id (UUID, primary key)
- post_id (UUID, foreign key to posts.id)
- user_id (UUID, foreign key to users.id)
- vote (TEXT, nullable, values: 'up', 'down', null)
- is_saved (BOOLEAN, default false)
- is_reported (BOOLEAN, default false)
- time_spent_seconds (INTEGER, nullable)
- interacted_at (TIMESTAMP)
- updated_at (TIMESTAMP)
```

**Unique constraint:** `post_id` + `user_id` (one interaction record per user per post)

**Indexes:**
- `user_id` + `is_saved` (for saved posts query)
- `post_id` (for aggregating votes)

---

## Authentication Flow

### Step 1: User Sign Up/Sign In
1. User opens app
2. Presented with two options:
   - "Continue with Phone Number"
   - "Continue with Google"
3. Supabase handles authentication
4. On first login, generate random 6-character alphanumeric `custom_user_id`
5. Store user record in `users` table
6. Store auth token locally

### Step 2: User ID Management
- Users can change their `custom_user_id` in account settings
- Check uniqueness before saving
- This ID is what displays on posts (not the UUID)

---

## App Structure & Navigation

### Bottom Navigation (3 tabs)
1. **Home Feed** (default view)
2. **My Posts** (user's own posts)
3. **Saved Posts** (posts user saved)

### Additional Pages
- **Account/Settings** (accessible via icon in top right)
- **Post Creation** (modal overlay from + button)

---

## User Interface Requirements

### 1. Home Feed Page

**Top Section:**
```
┌─────────────────────────────────────┐
│  [Account Icon]    Zip Social       │
│                                      │
│  [+ Got anything to share?]  ← Big button │
└─────────────────────────────────────┘
```

**Search & Filter Section:**
```
┌─────────────────────────────────────┐
│  Zip Code: [_____]  [Search]        │
│                                      │
│  Filter: [All] [News] [Fun Facts]   │
│          [Events] [Random]           │
└─────────────────────────────────────┘
```

**Feed Section:**
Each post card shows:
```
┌─────────────────────────────────────┐
│ @username123 · 2h ago · 90210       │
│ [News]                               │
│                                      │
│ Post content goes here...            │
│                                      │
│ (If Event: show structured details)  │
│                                      │
│ [👍 12] [👎 2] [Save] [Report]      │
└─────────────────────────────────────┘
```

### 2. Post Creation Modal

```
┌─────────────────────────────────────┐
│  What's happening in your area?     │
│                                      │
│  ┌─────────────────────────────┐   │
│  │ Type your post here...       │   │
│  │                              │   │
│  │                              │   │
│  └─────────────────────────────┘   │
│                                      │
│  Zip Code: [_____]                  │
│                                      │
│  Tag: ( ) News  ( ) Fun Facts       │
│       ( ) Events ( ) Random          │
│                                      │
│  [If Events selected, show fields:] │
│  When: [________]                    │
│  Cost: [________]                    │
│  Parking: [________]                 │
│  Link: [________]                    │
│  Contact: [________]                 │
│                                      │
│  [Cancel]           [Post]           │
└─────────────────────────────────────┘
```

### 3. My Posts Page
- Same post card UI as feed
- Only shows posts created by current user
- Sorted by newest first
- Option to delete own posts

### 4. Saved Posts Page
- Same post card UI as feed
- Only shows posts user has saved
- Sorted by save date (newest first)

### 5. Account Settings Page
```
┌─────────────────────────────────────┐
│  Account Settings                    │
│                                      │
│  Username: [username123] [Change]   │
│  Default Zip: [_____]                │
│                                      │
│  [Sign Out]                          │
└─────────────────────────────────────┘
```

---

## Core Functionality

### F1: Post Creation
**Steps:**
1. User taps "+ Got anything to share?" button
2. Modal opens with post form
3. User enters content, selects zip code and tag
4. If "Events" tag: additional fields appear (when, cost, parking, link, contact)
5. User taps "Post" button
6. **Validation:**
   - Content not empty
   - Zip code is valid (5 digits)
   - Tag is selected
   - If Events: at least "when" field is filled
7. Create record in `posts` table
8. Close modal, refresh feed

**Supabase Function:** `create_post`

### F2: Feed Retrieval
**Steps:**
1. User enters zip code in search box
2. User selects tag filters (can select multiple or "All")
3. App queries `posts` table WHERE:
   - `zipcode` = entered zip
   - `tag` IN selected filters (if not "All")
   - `is_active` = true
   - ORDER BY `created_at` DESC
   - LIMIT 50 (pagination)
4. For each post, fetch aggregated vote counts from `post_interactions`
5. Display posts in feed

**Local Storage:** Save last searched zip code and selected filters

**Supabase Function:** `get_feed`

### F3: Voting (Thumbs Up/Down)
**Steps:**
1. User taps thumbs up or thumbs down on a post
2. Check if interaction record exists for this user+post
3. If exists:
   - If same vote: remove vote (toggle off)
   - If different vote: change vote
   - Update `vote` field
4. If not exists:
   - Create new interaction record with vote
5. Update UI with new vote counts

**Optimistic UI Update:** Show change immediately, rollback if error

**Supabase Function:** `toggle_vote`

### F4: Save Post
**Steps:**
1. User taps "Save" on a post
2. Check if interaction record exists
3. If exists: toggle `is_saved` field
4. If not exists: create interaction with `is_saved` = true
5. Update UI (save icon changes state)

**Supabase Function:** `toggle_save`

### F5: Report Post
**Steps:**
1. User taps "Report" on a post
2. Show confirmation dialog: "Report this post?"
3. If confirmed:
   - Check if interaction record exists
   - If exists: set `is_reported` = true
   - If not exists: create interaction with `is_reported` = true
   - Increment `report_count` on the post
   - If `report_count` >= 10 (configurable threshold):
     - Set `is_active` = false
     - Post disappears from feed
4. Show toast: "Post reported"

**Supabase Function:** `report_post` (includes trigger to check threshold)

### F6: My Posts
**Steps:**
1. User navigates to "My Posts" tab
2. Query `posts` WHERE `user_id` = current user
3. ORDER BY `created_at` DESC
4. Display with same post card UI
5. Add "Delete" option to each post

**Supabase Function:** `get_my_posts`

### F7: Saved Posts
**Steps:**
1. User navigates to "Saved Posts" tab
2. Query `post_interactions` WHERE:
   - `user_id` = current user
   - `is_saved` = true
3. JOIN with `posts` to get full post data
4. ORDER BY `post_interactions.updated_at` DESC
5. Display with same post card UI

**Supabase Function:** `get_saved_posts`

### F8: Time Tracking (Analytics)
**Implementation:**
- When post card appears in viewport: start timer
- When post card leaves viewport or user navigates away: stop timer
- Update `time_spent_seconds` in interaction record
- This runs in background, doesn't block UI

---

## Supabase Edge Functions

### 1. `create_post`
**Input:**
```json
{
  "content": "string",
  "zipcode": "string",
  "tag": "string",
  "event_details": {
    "when": "string",
    "cost": "string",
    "parking": "string",
    "link": "string",
    "contact": "string"
  }
}
```
**Logic:**
- Validate all inputs
- Get user's custom_user_id
- Insert into posts table
- Return created post

### 2. `get_feed`
**Input:**
```json
{
  "zipcode": "string",
  "tags": ["news", "events"],
  "limit": 50,
  "offset": 0
}
```
**Logic:**
- Query posts with filters
- For each post, get aggregated votes (COUNT thumbs up, COUNT thumbs down)
- Get current user's interaction (if any) to show if they voted/saved
- Return posts with metadata

### 3. `toggle_vote`
**Input:**
```json
{
  "post_id": "uuid",
  "vote": "up" | "down" | null
}
```
**Logic:**
- Upsert into post_interactions
- Return updated vote counts for that post

### 4. `toggle_save`
**Input:**
```json
{
  "post_id": "uuid"
}
```
**Logic:**
- Upsert into post_interactions, toggle is_saved
- Return new saved state

### 5. `report_post`
**Input:**
```json
{
  "post_id": "uuid"
}
```
**Logic:**
- Upsert into post_interactions, set is_reported = true
- Increment report_count on post
- If report_count >= 10: set is_active = false
- Return success

### 6. `get_my_posts` & `get_saved_posts`
Similar structure to `get_feed`, different WHERE clauses

---

## iOS App Development Guidelines Compliance

### 1. Privacy & Data Collection
- **Privacy Policy Required:** Link to privacy policy before signup
- **Data Minimization:** Only collect necessary data (phone/email, posts, interactions)
- **User Consent:** Explicit consent for phone number authentication
- **Data Deletion:** Provide way to delete account and all data

### 2. User Interface
- **Human Interface Guidelines:**
  - Use native iOS components where possible (via Flutter's Cupertino widgets)
  - Respect safe areas (notch, home indicator)
  - Support both light and dark mode
  - Minimum tap target size: 44x44 points
  - Clear visual hierarchy
  
### 3. Authentication
- **Apple Sign In:** If offering Google Sign In, must also offer "Sign in with Apple"
- Add "Sign in with Apple" as third option alongside phone and Google

### 4. Content Moderation
- **Reporting System:** ✓ Already planned
- **User Guidelines:** Create and display community guidelines
- **Age Restriction:** Set appropriate age rating (likely 12+ or 17+)

### 5. Performance
- **App Size:** Keep under 100MB for initial download (Flutter helps here)
- **Launch Time:** App should launch in under 3 seconds
- **Responsiveness:** UI should respond to touches within 100ms

### 6. Accessibility
- **VoiceOver Support:** All UI elements must have labels
- **Dynamic Type:** Support iOS text size settings
- **Color Contrast:** WCAG AA standard (4.5:1 for normal text)
- **Reduced Motion:** Respect accessibility settings

### 7. Permissions
- **Photo Library:** If users can attach images (future feature)
- **Notifications:** Ask permission before enabling push notifications
- Request permissions only when needed, with clear explanation

---

## Development Phases & Testing Strategy

### Phase 1: Project Setup & Authentication
**Tasks:**
1. Initialize Flutter project
2. Set up Supabase project (create account, new project)
3. Configure Supabase Auth (enable phone & Google & Apple)
4. Create `users` table with schema
5. Build authentication screens
6. Implement login flow
7. Implement random user ID generation
8. Implement account settings (change username)

**Unit Tests:**
- User ID generation (6 characters, alphanumeric)
- User ID uniqueness validation
- Auth state management
- Local storage of auth tokens

**Integration Tests:**
- Complete signup flow (phone)
- Complete signup flow (Google)
- Complete signup flow (Apple)
- Login/logout cycle
- Change username flow

---

### Phase 2: Database & Core Data Models
**Tasks:**
1. Create `posts` table with indexes
2. Create `post_interactions` table with indexes
3. Create Supabase RLS (Row Level Security) policies
4. Build Flutter data models (User, Post, PostInteraction)
5. Implement Supabase client service layer
6. Set up error handling

**Unit Tests:**
- Data model serialization/deserialization
- Validation logic (zip code format, required fields)
- Error handling for network failures

**Integration Tests:**
- Database connection
- CRUD operations on all tables
- RLS policies work correctly

---

### Phase 3: Post Creation
**Tasks:**
1. Build post creation UI modal
2. Implement tag selection
3. Implement event details conditional form
4. Wire up to `create_post` function
5. Add input validation
6. Add loading states & error messages

**Unit Tests:**
- Form validation logic
- Event details visibility toggle
- Post data formatting

**Integration Tests:**
- Create post with all tag types
- Create event post with all fields
- Error handling for failed post creation
- Modal open/close behavior

**UI Tests:**
- Post creation flow from start to finish
- Cancel post creation
- Validation error messages display correctly

---

### Phase 4: Feed Display
**Tasks:**
1. Build home feed UI
2. Implement zip code search box
3. Implement tag filter chips
4. Build post card component
5. Wire up to `get_feed` function
6. Implement infinite scroll/pagination
7. Add pull-to-refresh

**Unit Tests:**
- Feed filtering logic
- Post card rendering with different data
- Pagination logic

**Integration Tests:**
- Fetch feed for different zip codes
- Filter by single tag
- Filter by multiple tags
- Pagination loads more posts
- Refresh updates feed

**UI Tests:**
- Complete feed browsing experience
- Filter interaction
- Scroll performance

---

### Phase 5: Interactions (Vote, Save, Report)
**Tasks:**
1. Implement thumbs up/down buttons
2. Wire up voting logic
3. Implement save button
4. Implement report button with confirmation
5. Add optimistic UI updates
6. Create Supabase functions for each interaction
7. Display vote counts

**Unit Tests:**
- Vote toggle logic (up → down → null → up)
- Save toggle logic
- Report confirmation logic
- Vote count aggregation

**Integration Tests:**
- Vote on post, verify database update
- Save post, verify appears in saved posts
- Report post, verify report count increments
- Post gets hidden after 10 reports
- Concurrent votes handled correctly

**UI Tests:**
- Vote buttons respond immediately
- Saved icon changes state
- Report confirmation dialog

---

### Phase 6: My Posts & Saved Posts
**Tasks:**
1. Build "My Posts" tab
2. Build "Saved Posts" tab
3. Wire up to respective functions
4. Add delete functionality for My Posts
5. Add unsave functionality for Saved Posts
6. Implement empty states

**Unit Tests:**
- Filter user's posts correctly
- Filter saved posts correctly
- Delete confirmation logic

**Integration Tests:**
- Fetch my posts
- Delete own post
- Fetch saved posts
- Unsave post

**UI Tests:**
- Navigate between tabs
- Delete post flow
- Empty state displays

---

### Phase 7: Settings & Profile
**Tasks:**
1. Build account settings screen
2. Implement username change
3. Implement default zip code setting
4. Add sign out functionality
5. Add delete account functionality (GDPR compliance)

**Unit Tests:**
- Username validation
- Zip code validation

**Integration Tests:**
- Change username successfully
- Prevent duplicate usernames
- Delete account removes all user data
- Sign out clears local storage

---

### Phase 8: Polish & iOS Guidelines
**Tasks:**
1. Implement light/dark mode support
2. Add VoiceOver labels to all interactive elements
3. Ensure color contrast meets WCAG AA
4. Support Dynamic Type
5. Respect Reduce Motion setting
6. Add app icon
7. Create splash screen
8. Add privacy policy page
9. Add community guidelines page
10. Implement "Sign in with Apple"

**Accessibility Tests:**
- VoiceOver navigation through all screens
- All text sizes from XS to XXXL
- High contrast mode
- Reduced motion mode

---

### Phase 9: Performance & Optimization
**Tasks:**
1. Optimize database queries (ensure indexes used)
2. Implement image optimization (if adding images later)
3. Add caching for feed data
4. Optimize app size
5. Measure and improve launch time
6. Add analytics (time tracking on posts)
7. Implement error logging (Sentry or similar)

**Performance Tests:**
- App launches in < 3 seconds
- Feed loads in < 2 seconds
- Smooth scrolling (60fps)
- Network error recovery

---

### Phase 10: Testing & Deployment
**Tasks:**
1. Comprehensive end-to-end testing
2. Beta testing with TestFlight (iOS)
3. Fix bugs from beta feedback
4. Prepare App Store listing (screenshots, description)
5. Submit to App Store
6. Set up Google Play Console for Android
7. Submit to Play Store

**Final Checklist:**
- [ ] All unit tests passing
- [ ] All integration tests passing
- [ ] All UI tests passing
- [ ] Accessibility audit complete
- [ ] Performance benchmarks met
- [ ] Privacy policy in place
- [ ] Community guidelines in place
- [ ] App Store screenshots ready
- [ ] App description written
- [ ] All API keys secured (not in source code)

---

## Security Considerations

### 1. Supabase Row Level Security (RLS)
Enable RLS on all tables with these policies:

**`posts` table:**
- SELECT: Everyone can read posts where `is_active = true`
- INSERT: Authenticated users can insert (their own user_id)
- UPDATE: Users can update only their own posts
- DELETE: Users can delete only their own posts

**`post_interactions` table:**
- SELECT: Users can read only their own interactions
- INSERT: Authenticated users can insert (their own user_id)
- UPDATE: Users can update only their own interactions
- DELETE: Users can delete only their own interactions

**`users` table:**
- SELECT: Users can read only their own record
- INSERT: Handled by Supabase Auth
- UPDATE: Users can update only their own record (username, default_zipcode)
- DELETE: Users can delete only their own record

### 2. API Security
- All Supabase functions require authentication
- Rate limiting on post creation (max 10 posts per hour per user)
- Rate limiting on reports (max 20 reports per hour per user)
- Sanitize all user input (prevent SQL injection, XSS)

### 3. Data Privacy
- Phone numbers and emails stored securely by Supabase Auth
- No PII (personally identifiable information) in posts table
- User can delete all their data (GDPR compliance)

---

## Environment Setup Instructions

### 1. Install Flutter
```bash
# Follow official Flutter installation guide
# https://docs.flutter.dev/get-started/install
flutter doctor
```

### 2. Create Supabase Project
1. Go to https://supabase.com
2. Create new project
3. Note: Project URL and anon key
4. Enable authentication providers:
   - Email (phone number)
   - Google OAuth
   - Apple OAuth

### 3. Set Up Environment Variables
Create `.env` file in project root:
```
SUPABASE_URL=your_project_url
SUPABASE_ANON_KEY=your_anon_key
```

### 4. Install Dependencies
```yaml
# pubspec.yaml
dependencies:
  flutter:
    sdk: flutter
  supabase_flutter: ^2.0.0
  provider: ^6.0.0
  shared_preferences: ^2.0.0
  intl: ^0.18.0
  flutter_dotenv: ^5.0.0
  
dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0
  mockito: ^5.0.0
  integration_test:
    sdk: flutter
```

---

## Folder Structure

```
lib/
├── main.dart
├── config/
│   ├── supabase_config.dart
│   └── theme.dart
├── models/
│   ├── user.dart
│   ├── post.dart
│   └── post_interaction.dart
├── services/
│   ├── auth_service.dart
│   ├── post_service.dart
│   ├── interaction_service.dart
│   └── storage_service.dart
├── screens/
│   ├── auth/
│   │   ├── login_screen.dart
│   │   └── signup_screen.dart
│   ├── home/
│   │   ├── home_screen.dart
│   │   └── create_post_modal.dart
│   ├── my_posts/
│   │   └── my_posts_screen.dart
│   ├── saved_posts/
│   │   └── saved_posts_screen.dart
│   └── settings/
│       └── account_settings_screen.dart
├── widgets/
│   ├── post_card.dart
│   ├── tag_filter_chips.dart
│   └── zip_code_search.dart
└── utils/
    ├── validators.dart
    └── constants.dart
```

---

## Definition of Done (for each feature)

A feature is complete when:
1. ✅ Code written and follows Flutter/Dart style guide
2. ✅ Unit tests written and passing (>80% coverage)
3. ✅ Integration tests written and passing
4. ✅ UI tests written and passing (for UI features)
5. ✅ Code reviewed (self-review checklist)
6. ✅ Manual testing on iOS simulator
7. ✅ Manual testing on Android emulator
8. ✅ Accessibility tested (VoiceOver, text sizes)
9. ✅ Performance tested (no lag, smooth scrolling)
10. ✅ Documentation updated

---

## Next Steps for Claude Code

Start with **Phase 1: Project Setup & Authentication**

First task: Initialize Flutter project with proper structure and dependencies.

Command to begin:
```bash
flutter create zip_social
cd zip_social
```

Then proceed through each phase sequentially, completing all tests before moving to the next phase. After each phase is complete and all tests pass, move to the next one.

Focus on building small, testable pieces and ensuring everything works before adding complexity. The key is steady, reliable progress with confidence that each piece works correctly.